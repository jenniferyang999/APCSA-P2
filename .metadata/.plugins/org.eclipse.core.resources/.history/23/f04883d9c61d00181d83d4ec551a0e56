import java.util.List;
import java.util.ArrayList;
import java.lang.Math;

/**
 * The Deck class represents a shuffled deck of cards.
 * It provides several operations including
 *      initialize, shuffle, deal, and check if empty.
 */
public class Deck {

	/**
	 * cards contains all the cards in the deck.
	 */
	private Card[] cards;
	private Card[] cardsnew;



	/**
	 * size is the number of not-yet-dealt cards.
	 * Cards are dealt from the top (highest index) down.
	 * The next card to be dealt is at size - 1.
	 */
	private int size, counter = 0;


	/**
	 * Creates a new <code>Deck</code> instance.<BR>
	 * It pairs each element of ranks with each element of suits,
	 * and produces one of the corresponding card.
	 * @param ranks is an array containing all of the card ranks.
	 * @param suits is an array containing all of the card suits.
	 * @param values is an array containing all of the card point values.
	 */
	public Deck(String[] ranks, String[] suits, int[] values) {
		size = ranks.length * suits.length;
		cards = new Card[size];
		for (int i = 0; i < ranks.length; i++) //
		{
			
			for (int j = 0; j < suits.length; j++) 
			{
				cards[i] = new Card(ranks[i], suits[j], values[i]);
				counter = counter +1;
			}
			
		}
	}


	/**
	 * Determines if this deck is empty (no undealt cards).
	 * @return true if this deck is empty, false otherwise.
	 */
	public boolean isEmpty() {
		if (counter == 0) {
			return true;

		}
		return false;
	}

	/**
	 * Accesses the number of undealt cards in this deck.
	 * @return the number of undealt cards in this deck.
	 */
	public int size() {
		return size;
	}

	/**
	 * Randomly permute the given collection of cards
	 * and reset the size to represent the entire deck.
	 */
	public void shuffle() {
		/* *** TO BE IMPLEMENTED IN ACTIVITY 4 *** */
		//size = 52;
	}

	/**
	 * Deals a card from this deck.
	 * @return the card just dealt, or null if all the cards have been
	 *         previously dealt.
	 */
	public Card deal() {
		System.out.print(isEmpty());

			if (isEmpty() == false)
			{
				counter = counter - 1;
				return cards[counter];
			}
			System.out.print("hello");
			return null;
			
/*
						//cardsnew = new Card[counter2 - 1];
				System.out.println("$$" + counter2);
				System.out.println("*" + thing);


				for (int j = 0; j < thing; j++)
				{

					System.out.printdealn("+" + j);
					cards [j] = cards[j];
				}
				for (int k = thing; k < counter2-1; k++)
				{
					System.out.println("-" + k);
					cards [k] = cards[k+1];
				}
				System.out.println("@@@@" + cards[thing]);
				 */
				
			

			//counter2 = counter2 - 1;
			//return cards[thing];

		//}
	}

	/**
	 * Generates and returns a string representation of this deck.
	 * @return a string representation of this deck.
	 */
	@Override
	public String toString() {
		String rtn = "size = " + (counter+1) + "\nUndealt cards: \n";

		for (int k = counter - 1; k >= 0; k--) {
			rtn = rtn + cards[k];
			if (k != 0) {
				rtn = rtn + ", ";
			}
			if ((counter - k) % 2 == 0) {
				// Insert carriage returns so entire deck is visible on console.
				rtn = rtn + "\n";
			}
		}

		rtn = rtn + "\nDealt cards: \n";
		for (int k = size - 1; k >= counter; k--) {
			rtn = rtn + deal();
			if (k != counter) {
				rtn = rtn + ", ";
			}
			if ((k - size) % 2 == 0) {
				// Insert carriage returns so entire deck is visible on console.
				rtn = rtn + "\n";
			}
		}

		rtn = rtn + "\n";
		return rtn;
	}
}
